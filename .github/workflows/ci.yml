name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: 1.21

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('function/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make setup

    - name: Run tests with coverage
      run: make test-coverage

    - name: Check coverage threshold
      run: |
        cd function
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 85" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below required 85%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets requirement"
        fi

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: function/coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('function/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make setup

    - name: Run go fmt
      run: make fmt

    - name: Check if code is formatted
      run: |
        if [ -n "$(gofmt -l function/)" ]; then
          echo "❌ Code is not formatted. Run 'make fmt'"
          gofmt -l function/
          exit 1
        fi

    - name: Run go vet
      run: make vet

    - name: Run golint
      run: make lint

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make setup

    - name: Run security scan
      run: make security-scan

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./function/'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  terraform:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: terraform fmt -check -recursive terraform/

    - name: Terraform Init
      run: terraform -chdir=terraform init -backend=false

    - name: Terraform Validate
      run: terraform -chdir=terraform validate

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security, terraform]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('function/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make setup

    - name: Build for Linux (Cloud Functions target)
      run: make build-linux

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: webhook-linux-binary
        path: function/webhook-linux
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: make setup

    - name: Run benchmark tests
      run: make benchmark

    - name: Test local function startup
      run: |
        # Start function in background
        make run-local &
        FUNC_PID=$!
        
        # Wait for function to start
        sleep 5
        
        # Test verification challenge
        curl -f "http://localhost:8080?hub.challenge=test-challenge&hub.mode=subscribe&hub.topic=test" || (kill $FUNC_PID && exit 1)
        
        # Cleanup
        kill $FUNC_PID